http {
		server {

		}
		location <...>{

		}

		format de l'erreur page = { error_page <error_code> <error_page>; }

		code erreur :
			200 = ok : La requête s'est déroulée correctement et le serveur renvoie la réponse attendue
			201 = created : La requête a réussi et une nouvelle ressource a été créée
			204 = no content : La requête a été traitée avec succès, mais aucune donnée n'est renvoyée dans la réponse.

			301 = Moved Permanently : La ressource a été déplacée de façon permanente vers une nouvelle URL. Les navigateurs peuvent rediriger automatiquement.
			302 = Found : La ressource demandée a été temporairement déplacée vers une autre URL.
			304 = Not Modified : La ressource n’a pas été modifiée depuis la dernière requête. Le client peut utiliser une version en cache.

			400 = Bad Request : La requête est mal formulée ou contient des erreurs syntaxiques.
			401 = Unauthorized : La requête nécessite une authentification. Le client doit fournir des identifiants valides.
			403 = Forbidden : L'accès à la ressource est interdit, même si l’authentification est correcte.
			404 = Not Found : La ressource demandée n'a pas été trouvée sur le serveur.
			405 = Method Not Allowed : La méthode HTTP utilisée (par exemple, POST ou DELETE) n'est pas autorisée pour cette ressource.
			429 = Too Many Requests : Le client a envoyé trop de requêtes en peu de temps et a été temporairement bloqué.

			500 = Internal Server Error : Une erreur générique côté serveur, souvent due à un problème inattendu.
			501 = Not Implemented : La méthode ou fonctionnalité demandée n'est pas supportée par le serveur.
			502 = Bad Gateway : Le serveur a reçu une réponse invalide d'un serveur en amont.
			503 = Service Unavailable : Le serveur est temporairement indisponible (surchargé ou en maintenance).
			504 = Gateway Timeout : Le serveur en amont n'a pas répondu à temps pour satisfaire la requête du client.

		exemple = error_page 404 404.html;
		error_page 403 403.html;

		return page spécifiée à renvoyer au client = {return <URI>;}
		exemple = {return https://google.com;}


		exemple de server basique :

		server
		{
			listen		8080 -> port
			server_name	127.0.0.2
			return 301	127.0.0.1
		}
}








void parse_listen(std::string line, Server &serv)
{
	size_t pos = line.find_first_not_of(" \t");
	if (pos != std::string::npos && line.find("listen", pos) == pos)
	{
		size_t start = pos + 6;
		while (start < line.size() && std::isspace(line[start]))
			start++;
		size_t end = line.find_first_of(" \t", start);
		std::string port = line.substr(start, end - start);
		serv.setPort(port);
	}
}

void parse_server_name(std::string line, Server &serv)
{
	size_t pos = line.find_first_not_of(" \t");
	if (pos != std::string::npos && line.find("server_name", pos) == pos)
	{
		size_t start = pos + 11;
		while (start < line.size() && std::isspace(line[start]))
			start++;
		size_t end = line.find_first_of(" \t", start);
		std::string server_name = line.substr(start, end - start);
		serv.setServerName(server_name);
	}
}

void parse_root(std::string line, Server &serv)
{
	size_t pos = line.find_first_not_of(" \t");
	if (pos != std::string::npos && line.find("root", pos) == pos)
	{
		size_t start = pos + 4;
		while (start < line.size() && std::isspace(line[start]))
			start++;
		size_t end = line.find_first_of(" \t", start);
		std::string root = line.substr(start, end - start);
		serv.setRoot(root);
	}
}

void parse_index(std::string line, location &loc)
{
	size_t pos = line.find_first_not_of(" \t");
	if (pos != std::string::npos && line.find("index", pos) == pos)
	{
		size_t start = pos + 5;
		while (start < line.size() && std::isspace(line[start]))
			start++;
		size_t end = line.find_first_of(" \t", start);
		std::string index = line.substr(start, end - start);
		loc.setIndex(index);
	}
}

void parse_error_page(std::string line, Server &serv)
{
	size_t pos4 = line.find_first_not_of(" \t");
	if (pos4 != std::string::npos && line.find("error_page", pos4) == pos4)
	{
		std::istringstream iss(line);
		std::string word;
		iss >> word;
		std::string error_code;
		iss >> error_code;
		std::string error_file;
		iss >> error_file;
		serv.setErrorPage(error_code, error_file);
	}
}

void parse_location(std::string line, location &loc, std::ifstream &file)
{
	size_t pos5 = line.find_first_not_of(" \t");
	if (pos5 != std::string::npos && line.find("location", pos5) == pos5)
	{
		size_t start = pos5 + 8;
		while (start < line.size() && std::isspace(line[start])) {
			start++;
		}
		size_t end = line.find_first_of(" {", start);
		std::string path = line.substr(start, end - start) + ' ';
		loc.setPath(path);
		size_t braceOpenPos = line.find('{', end);
		std::string sectionContent;

		if (braceOpenPos != std::string::npos) {
			sectionContent += line.substr(braceOpenPos + 1) + "\n";
		}
		std::istream& input = file;
		std::string nextLine;
		while (std::getline(input, nextLine)) {
			size_t braceClosePos = nextLine.find('}');
			if (braceClosePos != std::string::npos) {
				sectionContent += nextLine.substr(0, braceClosePos);
				break;
			} else {
				sectionContent += nextLine + "\n";
			}
		}

		std::istringstream sectionStream(sectionContent);
		std::string subLine;
		while (std::getline(sectionStream, subLine)) {
			size_t indexPos = subLine.find("index");
			if (indexPos != std::string::npos) {
				size_t startIndex = subLine.find_first_not_of(" \t", indexPos + 5);
				size_t endIndex = subLine.find_first_of(" \t;", startIndex);
				std::string index = subLine.substr(startIndex, endIndex - startIndex);
				loc.setIndex(index);
				break;
			}
		}
		std::cout << subLine << std::endl;
	}
}